<div class="wrapper">
<div class="info">
  <h1>To-Do Lists!</h1>
  <p>Don't we all love them? This is a first attempt to create a Object Oriented To-Do List in JavaScript. Try add a new entry by typing in the input field and hitting enter. <del>Remove always removed the first item. Needs to be fixed.</del></p>
  <p>Remove, Undo and adding new Entries works now. New Lists are created with a <code>init()</code> function.</p>
  <p>Thanks to <a href="http://www.reddit.com/r/javascript/comments/1yph81/request_feedback_for_an_objectoriented_todo_list/cfmlopp">ZyklusDieWelt's comment on Reddit</a> there's now better history handling, in other words: Undo ALL the things! Also thanks to <a href="http://www.reddit.com/r/javascript/comments/1yph81/request_feedback_for_an_objectoriented_todo_list/cfmlmv0">XiSExecute's</a> for pointing out unused stuff.</p>
  
  <h3>The conversation on Reddit is growing!</h3> 
  <p>Meanwhile it really got interesting so if you're a JavaScript beginner like me <a href="http://www.reddit.com/r/javascript/comments/1yph81/request_feedback_for_an_objectoriented_todo_list/">take a look at it</a>.</p>
</div>
  
  <div class="gw">
    <div class="g one-half  small-one-whole">
    <article class="list  list--work">
      <hgroup class="gw list__header">
          <div class="g three-quarters">
            <h3>Work</h3>
          </div>
          <div class="g one-quarter">
            <a class="btn" href="#" data-undo="work">Undo</a>
          </div>
        </hgroup>
      <ul data-list="work">
          <li>Do stuff</li>
          <li>Make Front-End magic</li>
          <li>COFFEE!!11!</li>
      </ul>
      <input type="text" data-input="work" class="input  input--work" />
    </article>
  </div>  <!-- list container -->
    
    <div class="g one-half small-one-whole">
      <article class="list  list--private">
        <hgroup class="gw list__header">
          <div class="g three-quarters">
            <h3>ToDoList Script</h3>
          </div>
          <div class="g one-quarter">
            <a class="btn" href="#" data-undo="private">Undo</a>
          </div>
        </hgroup>

        <ul data-list="private">
          <li>Auto-Generate Markup</li>
          <li>LocalStorage or MongoDB</li>
          <li>New colors</li>
          <li>Mark as done before delete</li>
          <li class="todo--is-done">DRYer Code (adding Events "dynamically"?)</li>
          <li class="todo--is-done">Undo Function</li>
          <li class="todo--is-done">Delete Function</li>
        </ul>
        <input type="text" data-input="private" class="input  input--private" />
      </article>
    </div> <!-- list container -->
 </div> <!-- gw -->
</div> <!-- wrapper -->


<style> 

@import "compass/css3";

@import url(https://fonts.googleapis.com/css?family=Open+Sans);
@import url(http://weloveiconfonts.com/api/?family=fontawesome|zocial);

/* fontawesome */
[class*="fontawesome-"]:before {
  font-family: 'FontAwesome', sans-serif;
}

/* zocial */
[class*="zocial-"]:before {
  font-family: 'zocial', sans-serif;
}

$color--work: tint(red, 20%);
$color--private: shade(lightgreen, 20%);

* {
  margin: 0;
  padding: 0;
  @include box-sizing(border-box);
}

a {
  color: $color--work;
  text-decoration: none;
    &:hover {
      color: $color--private;
    }
}

a[href*="reddit"]:before {
  font-family: 'zocial', sans-serif;
  content: '> ';
}

body {
  font: 1rem/1.3 'Open Sans', sans-serif;
  color: black;
  background: white;
}

h3 {
  margin: 1em 0 0;
}

.wrapper {
  width: 100%;
  max-width: 45em;
  margin: 0 auto;
}

.info {
  width: 100%;
  background: #f1f1f1;
  border-top: 5px solid #324566;
  margin: 1.5em auto;
  padding: 1.5em;
  
  p {
    margin: .5em 0;
  }
}

.list {
  width: 100%;
  padding: 1em;
  float: left;
  background: #ddd;
  
  li {
    background: white;
    padding: .5em;
    margin: 0 0 .25em;
    list-style: none;
    border-radius: 3px;
    border-bottom: .125em solid #9c9c9c;
    position: relative;
    
    &:hover {
      cursor: pointer;
      background: tint(red, 30%);
      border-bottom-color: shade(red, 10%);
    
        &:after {
          font-family: 'FontAwesome', sans-serif;
          content: "\f057"; 
          position: absolute;
          color: shade(red, 20%);
          right: .5em;
          top: 50%;
          @include translateY(-50%);
        }
      
    }
    
    &.todo--is-done {
      background: #cacaca;
      color: #9c9c9c;
      text-decoration: line-through;
      
        &:hover {
          border-bottom-color: #9c9c9c;
          background: lighten(#cacaca, 10%);
          
          &:after {
            content: '';
          }
        }
     }
  }
}

.list__header {
  margin-bottom: .5em;
  
  a {
   float: right;
    text-decoration: none;
  }
}

.btn {
  background: #333;
  color: white;
  padding: .25em .5em;
  display: inline-block;
  border-radius: 3px;
  
  &:hover {
    background: tint(#333, 5%);
  }
}

.list--work {
  border-top: 5px solid $color--work;
}
.list--private {
  border-top: 5px solid $color--private;
}

.input {
   display: block;
   width: 100%;
   padding: .5em;
   margin: 1em 0 0 0;
   border-radius: 3px;
}

.input--work {
  border: 1px solid $color--work;
}
.input--private {
  border: 1px solid $color--private;
}

</style>


<script>
var ToDoList = function(name) {
  this.el = list = document.querySelector('[data-list="' + name +'"]');
  this.childs = this.el.querySelectorAll('li');
  this.lastRemoved = [];
 
  this.input = document.querySelector('[data-input="' + name +'"]');
  this.undoButton = document.querySelector('[data-undo="' + name +'"]');
 
  
  this.demoList = ["Do stuff", "Make Front-End Magic", "COFFEE!!!!", "Another important point", "Yet another thing to do"];
  
  
  this.addEntry = function(entry) {
    this.el.innerHTML += '<li>' + entry + '</li>';
  }
  
  this.init = function() {
    this.removeEntry();
    this.addByInput();
    this.undoRemove();
    this.addByArray([]);
  }  
}

ToDoList.prototype.addByArray = function(array) {
  this.array = array;
  var list = this;
  array.forEach(function (item) {
    console.log(item);
    list.addEntry(item);
  });
}

ToDoList.prototype.addByInput = function() {
  this.input.addEventListener('keyup', function(e) {
    e.preventDefault();
    if(e.keyCode === 13 && input.value.length > 0) {
      this.addEntry(input.value);
      input.value = null;
    }
  }.bind(this));
}

ToDoList.prototype.removeEntry = function() {
  this.el.addEventListener('click', function(e) {
    // make sure it's a <li> that gets removed
    if(e.target.nodeName === 'LI') {
      this.lastRemoved.push({action: 'remove', content: e.target});
     this.el.removeChild(e.target);
    }
  }.bind(this));
}


ToDoList.prototype.undoRemove = function() {
  this.undoButton.addEventListener('click', function(e) {
    e.preventDefault();
    // array.pop() returns last element of an array & removes it.
    var lastEntry = this.lastRemoved.pop();
    if(lastEntry.action === 'remove') {
      this.addEntry(lastEntry.content.innerText);
    } else {
      console.log("No last entry.");
    }
  }.bind(this));
}

/*
  Make a new List and initialize it with the standard functions. 
  Optional you could use it like
  
  var myList = new ToDoList('listName');
  myList.addEntry();
*/

var lists = {};

lists.work = lists.work || new ToDoList('work').init();
lists.private = lists.private || new ToDoList('private').init();

</script>
